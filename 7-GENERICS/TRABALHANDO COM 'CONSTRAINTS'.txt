
















--> VIMOS OS GENERICS, NO ARQUIVO DE 'creatingAGenericFunction.ts'....












ERAM AQUELES CÓDIGOS DE 









''''












function merge<T, U>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj = merge({name: 'Max'}, {age: 30});



console.log(mergedObj.age);














'''''''''''''''''











--> VIMOS QUE ___ PASSAMOS ALGUMA INFORMAÇÃO EXTRA NA FUNCTION DE 'merge' ( com o T e o U),




TUDO PARA QUE CONSIGAMOS TRABALHAR DE FORMA MELHOR COM O _RESULT_ DA 




FUNCTION DE 'merge' ---------> E OS GENERICS EXISTEM PARA ISSO,


PQ 
TE DEIXAM 







__ _CONTINUAR__ TRABALHANDO COM SUA DATA,

EM UMA 

MANEIRA 'TYPESCRIPT OPTIMAL'...












--> OK... MAS NESSE CASE, TERÍAMOS UM PROBLEMA SE PASSÁSSEMOS 



SÓ UM 'NÚMERO SOLTO' de 30 



como segundo parâmetro:







function merge<T, U>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj = merge({name: 'Max'}, 30);



console.log(mergedObj.age);









--------------------------------










--> VAI NOS DAR UM ERROR DE 


'
'Property 'age' does not exist on type '{ name: string; } & 30


'' 








--> ISSO FAZ SENTIDO, PQ '30' 

É UM NUMBER,


E 



QUANDO PASSAMOS ESSE NÚMERO COMO SEGUNDO PARÂMETRO AO 



'Object.assign()',




NÓS 


'
FAIL SILENTLY' --> o que significa que 




O
 

 JAVASCRIPT FALHA EM SILÊNCIO, NÃO RECLAMA NEM NADA... --> e também 


 NÃO MERGEIA 

 O 



'30' 


com 

o 



OUTRO OBJECT... -->   OK.... MAS ___ COMO O JAVASCRIPT PODERÍA RECLAMAR DISSO?















--> BEM, O QUE VAMOS QUERER DIZER É:










'''' NÓS ___ NÃO NOS IMPORTAMOS COM O EXACT TYPE/STRUCTURE DOS OBJECTS 


U E T.... -----> MAS O QUE INTERESSA, PARA NÓS, É QUE AMBOS OS TYPES __ SEJAM__ REALMENTE__ 
OBJECTS'''' (pq 

essa informação __ NÃO FOI PASSADA__)...''''










'''THEY SHOULD BE A OBJECT __ AT ALL TIMES'''' ---> 















---> OK, QUERMEOS RESTRINGR 















------> E PODEMOS FAZER ISSO COM 'TYPE CONSTRAINTS'....










--> OK... -------> PARA GENERIC TYPES,

PODEMOS SETTAR ALGUNS 'CONSTRAINTS' 


,


que 

ditarão


QUAIS TYPES SEUS 

GENERIC TYPES PODEM SER 'BASED on'...














-------------> PARA ISSO,



VOCÊ DEVE USAR A KEYWORD DE 'extends' 



DENTRO DO 

'<>' ,


DEPOIS __ DO __ TYPE__ (da letra) QUE 

VOCÊ QUER 'CONSTRAIN'...









eX:










function merge<T extends object, U>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj = merge({name: 'Max'}, 30);



console.log(mergedObj.age);






-----------------------------------------------








 

 'T extends object' -------> COM ISSO, ESTAREMOS DIZENDO 






 'O PARÂMETRO T PODE SER QUALQUER OBJECT, COM QUALQUER ESTRUTURA, MAS PRECISA SER UMA ESTURUTRA'...










 eX:






 

function merge<T extends object, U extends object>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj = merge({name: 'Max'}, 30);



console.log(mergedObj.age);


-------------------------------------
















EX:












function merge<T extends object, U extends object>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj5 = merge({name: 'Max'}, 30); ////isso vai dar um ERRO... --> pq NUMBERS NÃO FUNCIONAM/NÃO SÃO ACEITOS COMO PARÂMETRO DE 'Object.assign' --> É POR ISSO QUE VAMOS QUERER 
            ///DECLARAR QUE ESSA FUNCTION DE 'MERGE'  SÓ __ VAI __ FUNCIONAR/ACEITAR __ oBJECTS, OBJECTS COM ESTRUTURAS VARIADAS, MAS __ SÓ OBJECTS_...



console.log(mergedObj5.age);







-------> SE FAZEMOS ISSO, JÁ RECEBEMOS UM ERRO EM '30',


PQ ELE NÃO SERÁ ASSIGNÁVLE AO TYPE DE 'object'....








EX:














function merge2<T extends object, U extends object>(objA: T, objB: U) {


    return Object.assign(objA, objB);
}




const mergedObj5 = merge2({name: 'Max'}, 30); ////isso vai dar um ERRO... --> VAI DAR ERRO JUSTMAENTE PQ DEFINIMOS EM ''' <T extends object, U extends object> ''' QUE __ O ÚNICO TYPE ACEITADO SERÁ O DE 'object'...





















----------> OK... ESSE É O PADRÃO QUE QUEREMOS, AQUI.. -> e agora somos forçados a REALMENTE PASSAR UM OBJECT MAIS UMA VEZ (e não uam string/number),




PQ  O 'Object.assign'




VAI REALMENTE EXIGIR 2 OBJECTS, 


E AÍ 


VAMOS QUERER _ _ ASSEGURAR QUE RECEBEMOS 2 OBJECTS EM 'T' e 'U'.......

 










 E ESSAS CONSTRAINTS (o '<extends xxx>' lá na function definition ) PODEM/PODERÍAM SER __ QUALQUER COISA... ---->  PODERÍAMOS NOS RFEFERIR 



 a 

 'string', 'number',



 'array',





 E _ ATÉ MESMO_ SEU PRÓPRIO TYPE....












 ------> VOCÊ PODE ATÉ MEMSO USAR UNION TYPES- -> há mt flexibilidade 



 quanto 



 ao 

 USO DE CONSTRAINTs 





 NOS SEUS 'GENERIC TYPES'...












-> E É CLARO QUE VOCê _ NÃO É FORÇADO A 'CONSTRAIN' __ tODOS _OS 






___ 'GENERIC TYPEs'-----> OU SEJA, SE VOCÊ QUER 'constrain' APENAS ___O  'U',






VOCÊ SÓ ADICIONA O 'extends object'


NELE...

















-> ok... isso é bem útil para deixar o código typescript mais flexível...









--> MAS É IMPORTANTE__ ENTENDER _ O CONCEITO DE 'constraints',






PQ ISSO 
TE DEIXAM


TRABALHAR 

COM CÓDIGOS 'GENERICS'


DE MANEIRA MELHOR, MANEIRA QUE EVITA ERRORS DESNECESSÁRIOS.....