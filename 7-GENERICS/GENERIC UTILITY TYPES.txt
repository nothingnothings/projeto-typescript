













--------> FALANDO DE MAIS 'GENERIC TYPEs' 




no typescript,









COMO UM PEQUENO BONUS,


O PROFESSOR 








QUER NOS MOSTRAR UM POUCO DE '


BUILTIN TYPES'


que 





O 


JAVASCRIPT TEM 

NATIVAMENTE,


e que usam/são generic types...
















------> ESSES GENERIC TYPES NOS DÃO ALGUMAS 'UTILITY FUNCTIONALITIES'....













--> É UM PEQUENO BONUS...









-> DE TEMPOS EM TEMPOS, ESSES TYPES PODEM SER ÚTEIS...









--> TEMOS 1 LINK PARA O FULL DOCS de todos os builtin utility types....



https://www.typescriptlang.org/docs/handbook/utility-types.html















--> ESSES TYPES SÓ EXISTEM NO MUNDO 'TYPESCRIPT' --> 




MAS DURANTE 



A ETAPA DO COMPILATION PODEM TE DAR EXTRA TYPE-SAFETY....









 










 ------> POR EXEMPLO,




 HÁ O TYPE 'BUILTIN'

 de 



 'Partial'...








 ----------------------------










 PARA VER ESSE TYPE,


 O 

 PROFESSOR ESCREVE 

 uma 'interface'..











 ele escreve assim:
















 interface CourseGoal {


     title: string;
    description: string;

 }












 --> VAI TER UM TITLE QUE SERÁ UMA STRING,


 E UMA DESCRIPTION,


 TAMBÉM STRIng...










 --> terá outra property, que será uma DATE...














 --> AÍ VAMOS TER UMA FUNCTION, 




 de nome 


 'createCourseGoal',



 QUE VAI CRIAR UM OBJECT 

 DESSES 


 (



     um object tipo 'CourseGoal'...
 )












 --> PROFESSOR EXPLICA QUE 

 É CLARO QUE PODERÍAMOS TER USADo 



 UMA




 'class'




 AQUI PARA ISSO,



 para 


 criar 1 object com essas propriedades.... --> entretanto,








 __ AQUI VAMOS QUERER _ TER UMA FUNCTION PQ DENTRO DESSA FUNCTION VAMOS PODER ESTAR 


 'DRAWING SOME DATA FROM A DATABASe',


 ou por alguma razão assim...







  





  --> NOS PARAMETERS, VAMOS QUERER OBTER O title (string), 


  a description (string),




  completeUntil(Date)...
  )










  Ex:





  function createCourseGoal(title: string, description: string, date: Date) {}















  ------------------------------------------




É CLARO QUE DENTRO DESSA FUNCTION PODERÍAMOS SIMPLESMENTE FAZER UM RETURN DE UM OBJECT COM TODAS ESSAS COISAS,

TIPO ASSIM















  function createCourseGoal(title: string, description: string, date: Date): CourseGoal {


return {
      title: title,
      description: description,
        completeUntil: date
}




  }












--> 





COM ISSO, TERÍAMOS UM SETUP 'BREAD AND BUTTER'




bem simples,


mas válido...













--> MAS DIGAMOS QUE NÃO VAMOS FAZER ASSIM,

NÃO VAMOS ESCREVER UM CÓDIGO FACIL ASSIM....





(

    NÃO FAREMOS TUDO 'IN ONE STEp'..





)











--> EM VEZ DISSO,


PROFESSOR QUER COMEÇAR 







PELO CREATE DE UMA VARIABLE,


NESSA FUNCTION,


QUE 



CRIARÁ UM 


OBJECT VAZIO...








-> E AÍ,


ETAPA POR ETAPA, PROFESSOR QUER IR ADICIONANDO AS PROPERTIES A ESSE OBJECT (title, description e 'date')...













ex:















function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal = {};
    courseGoal.title = title;
    courseGoal.description = description;
    courseGoal.completeUntil = date;
    
    
    
      }












--> E QUANDO ESCREVERMOS ESSAS DEFINITIONS COM A DOT NOTATION,


VAMOS RECEBER ERRORS....









--> serão errors de 





''' Property 'description' does not exist on type '{}'. '''''
















--> é pq essas propriedades NÃO SÃO PROPRIEDADES DESSE OBJETO....














-_> ESSA SINTAXE PODE FUNCIONAR NO VANILLA JAVASCRIPT (weakly typed),

MAS 

NÃO FUNCIONA NO TYPESCRIPT...









----> ts não gosta desse 'on the fly adding',

essencialmente...
 









 -> É POR ISSO QUE DEVEMOS DIZER QUE o 'courseGoal

 '
 deve


 ser DE TYPe 'CourseGoal'....








 ex:









 
function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal: CourseGoal = {};
    courseGoal.title = title;
    courseGoal.description = description;
    courseGoal.completeUntil = date;
    
    
    
      }








----------------------------









OK... MAS AGORA O TYPESCRIPT__ VAI __ RECLAMAR __dE OUTRA COISA,

VAI RECLAMAR 



QUE __ O 

'{}'

VAI ESTAR COMO UM EMPTY OBJECT,



OU SEJA,



SEM NENHUMA 

DAS PROPRIEDADES 

que faria esse '{}' ser considerado como 'COMPATÍVEL/ADEQUADO' Às propriedaeds 



de 


'CourseGoal' interface....













-------> ok... ------->  



DIGAMOS QUE 




TEMOS 'VALIDATION' entre cada 1 dos 'adds' das propriedades 


nesse objeto 'courseGoal',


tipo assim:










function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal: CourseGoal = {};
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.title = title;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.description = description;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.completeUntil = date;
    
    
    
      }






--------------------------------------










NESSE CASO,


ESSE APPROACH 'STEP-BY-STEP' faz sentido,




MAS 

O
 

 TYPESCRIPT ESTÁ CHORANDO 


 sobre 



 essa linha de 



 'let courseGoal: CourseGoal = {}'..










 ->E É EXATAMENTE AQUI que 



 O TYPE DE 'PARTIAL' 







 PODE NOS AJUDAR...














 --> PARA RESOLVER O PROBLEMA,

 DEFINIMOS 



 que


 esse 




 'let courseGoal' que É 


 UM '{}'


 DEVE 

 SER CONSIDERADO, SEU TYPE,

 COMO DE 

 'PARTIAL'.... 













 --------> E UM TYPE DE 'Partial',


 NO CASO,


 OBRIGA__ QUE __VOCê PASSE, COMO PARÂMETRO EM '<>',


 OQ UE 


 ELE 



 'SEGURA'...










 --> no caso, 

 VAMOS PASSAR O 'CourseGoal' como argumento...










 EX:













 

function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal: Partial<CourseGoal> = {}; ///exemplo do uso de 'PARTIAL'...

    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.title = title;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.description = description;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.completeUntil = date;
    
    

    
      }



























--_> NO CASO, ISSO ESTÁ DIZENDO:










''''ESSE É UM OBJECT QUE__, NO FINAL DA EXECUÇAÕ,  SERÁ UM 

"COURSEGOAL", mas que por enquanto não será....'''' ------------> 







MAS O QUE O 



'Partial' FAZ __ É, INICIALMENTE,





DEIXAR_ _ 





TODAS AS PROPRIEDADES NO NOSSO 'WRAPPED TYPE' ( no caso, 'CourseGoal') 




__ COMO OPTIONAL (?)... é isso que ele faz...


















--> ISSO SIGNIFICA QUE 











__ ELE__ TRANSFORMA 

ISSO, 

'COURSEGOAL',



EM 


1 
TYPE QUE 

TAMBÉM 






É UM OBJECT TYPE,



MAS __ EM QUE_ TODAS AS PROPRIEDADES SÃO OPTIONAL.... --. é por isso que 




VAMOS PODER DEFINIR ESSE OBJECT VAZIO de '{}' 



em 

'courseGoal' 



inicialmente,



para que eventualmente adicionemos as properties...
















------> O ÚNICO PROBLEMA, AQUI, 



É QUE NÃO VAMOS PODER FAZER 'RETURN' 


de 


'courseGoal',







PQ O TYPESCRIPT AINDA ACHA QUE 

O 


TYPE DESSA FUNCTION SERÁ de 


'Partial<CourseGoal>'


EM VEZ DE 


'CourseGoal'...






















-----> O FIX PARA ISSO É SIMPLES... -> TEMOS QUE __ CONVERTER__ O 

TYPE DE 'Partial<CourseGoal>'



,



nesse 'return courseGoal',






PARA __ 


'CourseGoal'....










--> E FAREMOS ISSO POR MEIO DO CO´DIGO DE 'TYPE INFER',


tipo assim:






function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal: Partial<CourseGoal> = {}; ///exemplo do uso de 'PARTIAL'...

    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.title = title;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.description = description;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.completeUntil = date;
    
    


        return courseGoal as CourseGoal; ///RESOLVIDO O PROBLEMA....
    
      }











EX:













function createCourseGoal2(title: string, description: string, date: Date): CourseGoal {


    let courseGoal: Partial<CourseGoal> = {}; ///exemplo do uso de 'PARTIAL'...

    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.title = title;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.description = description;
    ///extra validation (possível, entre cada etapa de add de propriedade)..
    courseGoal.completeUntil = date;
    
    


        // return courseGoal; ///não funcionará (pq o return type, caso escrito assim, ainda será de 'Partial<CourseGoal>' ) -_> devemos USAR A SINTAXE DE TYPE CASTING...

//ex:


        return courseGoal as CourseGoal;/// eis aqui o fix para o return type de 'Partial<CourseGoal>'..
    
      }





-----------------------------------




























ok.......  ----> ISSO PQ AGORA SABEMOS QUE TEREMOS UM 'FULL COURSEGOAL',


em vez de um 


' PARTIAL ONE'....
















--> é clar oque 

esse é um exemplo fabricado,




MAS EXISTIRÃO 



CENÁRIOS COMO ESSE,

em que 



TEMPORARIAMENTE 

VOCÊ 











VAI QUERER TROCAR/SWITCH SUAS INTERFACES PARA QUE 



ELAS 

SEJAM
 
 'OPTIONAL ONLY'... (como aquele objeto vazio, de '{}' ).... ----->  CLARO QUE VOCÊ 

 VAI 


 QUERER __ ISSO __ APENAS TEMPORARIAMENTE... --> NESSAS HIPÓTESES, O TYPE DE 


 'Partial<>'



 PODE TE AJUDAR....





















 -------> OUTRO UTILITY TYPE BUILTIN 


 é 



 o de 



 'Readonly'...













 --> ESSE TYPE TAMBÉM PODE SER MT ÚTIL...












 -> digamos QUE TEMOS UM ARRAY DE NAMES,

 com 


 'Max'

 e 

 'Sports'...









 --> 




 const names = ['Max', 'Sports'];














 --> CORRETAMENTE, TYPESCRIPT VAI INFERIR QUE ISSO AÍ É UM 'STRING ARRAY'




 tipo asim:




 const names: string[]














 -> COMO ISSO É UM STRING ARRAY,


 PODEMOS FAZER __ PUSH_ DE STRINGS PARA DENTRO DELE....







 ------------------------------















 OK........ MAS DIGAMOS....

 QUE __ DEPOIS __ DE 


 ADICIONAR ESSA STRING AÍ,




 quermos__


 DEIXAR ESSE 
 ARRAY 

 COMO 

 'LOCKED'....







 OU SEJA,

 NÃO QUEREMOS DEIXAR NENHUMA STRING SER ADICIONADA... 













 -------> QUERO QUE O TYPESCRIPT GRITE COMIGO,



 QUE TENTE ME IMPEDIR DE ADICIONAR MAIS VALORES STRING A ESSE ARRAY...










 --> PARA ISSO,


 PODEMOS DEFINIR O GENERIC TYPE DE 'Readonly',



 tipo assim:









 const names: Readonly<string[]> = ['Max', 'Anna']

















 --> COMO ESSE 'GENERIC TYPE'




 DE TIPO UTILITY_ É UM WRAPPER,


 temos que 

 COLOCAR NOSSO 

 


 'VERADDEIRO TYPE' (que é um string[])




 NO SEU INTERIOR....









 EX:










 



const names5: Readonly<string[]> = ['MAX', 'SPORTS']; ////OK, ESTAMOS DIZENDO QUE ISSO É REALMENTE UM ARRAY DE STRINGS, MAS UM ARRAY QUE É 'READONLY', ou seja, QUE NÃO PODE SER ALTERADO (valores não podem ser adicionados, nem alterados, nem removidos)...





names5.push('Manu');


names5.pop();




















--------> E É CLARO QUE ISSO NÃO SE LIMITA A ARRAYS,


VOCÊ PODE 

USAR 

'readonly'



COM_ _ OBJECTS_, TAMBÉM,



PARA_ _ QUE __ 



VOCÊ NÃO SEJA CAPAZ DE MUDAR SUAS PROPRIEDADES...










OBS::: 


You cannot change a variable's type in TypeScript, 
that's just the opposite TS was made for. Instead, you can declare a variable as "any",
 which would be equivalent to a classic "var" variable in JS, untyped. Once a variable is declared,
  you will not be able to retype it.








---------------------------










OK... ISSO SIGNIFICA QUE 


o 


'Readonly'




É BEM HANDY,

E TE DÁ MAIOR FLEXIBILDIADE/PRECISÃO SOBRE O QUE 

VOCÊ 

QUER FAZER 

COM 


SEU CÓDIGO...














-> ISSO TUDO SÃO UTILITY TYPES QUE SÓ EXISTEM NO MUNDO TYPESCRIPT,


mas durante a compilation 

te dão 

extra scrictness/checks,



OU SKIPPAM CERTOS CHECKS (como o com os 'Partial')...











--> EM CERTOS CENÁRIOS ESSES 'GENERIC UTILITY TYPES'



podem 



ser mt úteis... --> 










--_> CASOS EM QUE VOCê QUER 'LOCK SOMETHING DOWN',




OU 'OPEN SOMETHING UP' (com partials).... ------->  OU ENTÃO,


COMO 

TODOS OS OUTROS,


se vocÊ tem outra operation que pode ser enhanced com um desses 


utility types...












-> E TODOS ESSES 'UTILITY TYPES'


SÃO GENERIC 

PQ 




ELES SEMPRE __ PEGAM UM TYPE QUE 

JÁ EXISTE 






___ E ENTÃO__ FAZEM ALGO COM ELE (ou 'set everything to optional', como no 'Partial', ou então 'LOCK EVERYTHING DOWN', com o 'readonly')....







(

    e não se importam com a coisa que estão manageando/armazenando/wrappando,

    É POR ISSO QUE SÃO 'GENERIC'... 
)











-> e junto com os outros generics,


isso 



tudo te ajuda a entender pq generics são úteis, e pq existem....