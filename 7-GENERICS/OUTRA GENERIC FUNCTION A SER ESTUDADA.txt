
















------ OK.... DEVEMOS CONTINUAR A PRÁTICA COM OS GENERIC TYPES, QUE 







USAMOS NESTE CÓDIGO AQUI:


























// function merge(objA: object, objB: object) { ///essa função é/seria válida...




//         return Object.assign(objA, objB); 


// }











// console.log(merge({name: 'NOME'}, {age: 21})); /////////ISSO FUNCIONA/FUNCIONARIA....








// const mergedObject = merge({name: 'NOME'}, {age: 21}); ////SE FIZERMOS TIPO ASSIM.... ---> SURGIRÁ UM PROBLEMA.... --> não conseguiremos acessar '.name' nesse STORED OBJECT...





// mergedObject.name ////erro typescript... --> Property 'name' does not exist on type 'object'. --> isso ocorreu JUSTAMENTE PELO USO DE 'type: object', lá na nossa function...








// ---> OU SEJA,



// O USO DO TYPE GENERIC DE 'object'



// É INSATISFATÓRIO, PQ 
// VAI 


// RESULTAR EM ERRORS COMO ESSE....







///POSSÍVEL FIX:



// const mergedObj = merge({name: 'Max'}, {age: 30}) as {name: string, age: number}; ////SIM, PODERÍAMOS FAZER ASSIM....
// //// o problema é que teríamos que fazer isso para __ CADA__ CALL __DE 'merge' no nosso código....



////////////////










// --> NESSE EXEMPLO, 'GENERICS' PODERIAM/PODEM NOS AJUDAR...

















// --> PARA __tRANSFORMAR___ UMA FUNÇÃO EM UMA 'GENERIC FUNCTIOn',







// _ VOCÊ_ DEVE escrever '<>' 






// ___dEPOIS__ DO FUNCTION NAME...









// tipo assim:











// function merge<>(objA: object, objB: object) {




//         return Object.assign(objA, objB); 


// }







// ---------------------------------------------












// AÍ, DENTRO DESSE '<>',



// DEFINIMOS ___ 



// 2 IDENTIFIERS__ DIFERENTES...















// --------> O PRIMEIRO __ IDENTIFIER__ TIPICAMENTE É 'T',




// que é uma abreviação de 'Type'.... (mas você poderia usar qualquer identifier, não precisa ser 1 letra só)....











// --> MAS A CONVENÇÃO É USAR__ APENAS 1 'CHARACTER',



// e se VOCÊ TEM APENAS 1 
// GENERIC TYPE NO SEU CÓDIGO,



// vocÊ usa 'T'...




















// --> FICA TIPO ASSIM:






// function merge<T>(objA: object, objB: object) {




//         return Object.assign(objA, objB); 


// }


















// ISSO VAI BASICAMENTE DIZER AO TYPESCRIPT:




// '''ESSE GENERIC TYPE DE "T" VAI 


// AGORA FICAR DISPONÍVEL_ _ _APENAS__ DENTRO DESSA FUNCTION_ ....."















// -> DEFINIDO ESSE NOME DE 'T',




// podemos o UTIIZAR EM PARTES DE NOSSA FUNCTION LOCAL...









// TIPO ASSIM:







// function merge<T>(objA: T, objB: object) { 




//     return Object.assign(objA, objB); 


// }













//// MAS QUEREMOS QUE 'objB' também tenha um 'CUSTOM TYPE', que não seja object, por isso CRÍAMOS UM NOVO 'GENERIC TYPE' nessa function, tipo assim:





////





// function merge<T, U>(objA: T, objB: U) { 




//     return Object.assign(objA, objB); 


// }













///// o type seguinte será de 'U' (pq vamos seguir o alfabeto, em ordem, para definir esses types locais)...
















function merge<T, U>(objA: T, objB: U) { 




    return Object.assign(objA, objB);   //// '(method) ObjectConstructor.assign<T, U>(target: T, source: U): T & U (+3 overloads)' 


}











const mergedObj = merge({name: 'Max'}, {age: 30});







const age = mergedObj.age; ///sem errors..






const mergedObj2 = merge({job: 'coder'}, {name: 'asasas'});






// const mergedObj3 = merge<string, number>({job: 'coder'}, {name: 'asasas'}); //exemplo de incompatibilidade (de '<string>' com {job: 'coder'}) 



const mergedObj3 = merge<{job: string}, {name: string}>({job: 'coder'}, {name: 'asasas'}); //JÁ ESTE CÓDIGO AQUI SERIA/É COMPATÍVEL, mas é mt VERBOSE... --> é REDUNDANTE.




// ------> BEM, SE VOCÊ PASSAR O MOUSE EM CIMA de 


// 'function',


// VOCê 

// VERÁ 

// ISTO AQUI:










// function merge<T, U>(objA: T, objB: U): T & U














// -> OU SEJA, TYPESCRIPT INFERIU QUE __ 

// ESSA FUNCTION__ VAI RETORNAR UMA 'INTERSECTION' 



// entre 

// T e U .... ('T & U')...
















// OK, MAS PQ ELE FEZ ISSO?




// COMO FOI CAPAZ DE INFERIR ISSO AGORA, com 


// 'T' E 'U',




// __ E NÃO COM 'object', como antes...? 




// --> ISSO É PQ 



// 'object' É UM 

// TYPE ALTAMENTE INESPECÍFICO.... ------> NÓS DIZEMOS 'ANY OBJECT',







// o que VAI FAZER COM QUE O 


// TYPESCRIPT SIM, CONSIGA INFER QUE  




// VAMOS RETORNAR UMA INTERSECTION DE 


// '''object & object'''' --> MAS 




// A INTERSECTION DE 2 'UNKNOWN OBJECTS'


// VAI RETORNAR EXATAEMNTE ISSO,

// UM




// 'UNKNOWN OBJECT'....






















// --> esse 'object' é mt genérico, e deve ser evitado....



// ---> JÁ COM OS 'generic types' (como 'T' e 'U') ,


// SOMOS _ CAPAZES__ DE DIZER_ AO TYPESCRIPT _ QUE 

// ESSES 2 

// PARAMETERS 

// PODEM, e frequentemente VÃO,


// ser 

// DE __ DIFERENTES__ TYPES__....
















// --> O TYPESCRIPT VAI ENTENDER QUE NÃO ESTMAOS 'WORKING WITH SOME RANDOM OBJECT TYPE',


// e sim 



// QUE __ VAMOS RECEBER 'DIFFERENT DATA' AQUI,


// e que 

// ESSA FUNCTION, OVERALL, 




// VAI __ RETORNAR__ A INTERSECTION DESSA DATA... -----------> E É POR ISSO 

// QUE 


// O TYPESCRIPT VAI ENTENDER 

// QUE 



// O RETURN DESSA DATA ALI VAI __ SER A INTERSECTION DESSES 2 TYPES ESPECÍFICOS... (

//     pq agora 

//     não estamos 

//     mais lidando com 


//     2 objects inespecíficos/vagos, e sim 


//     COM 


//     2 TYPES __ BEM DEFINIDOS...
// )



////EX:










// -------> NÃO NOS IMPORTAMOS QUANTO AO EXATO OBJECT QUE SERÁ O TYPE,




// E SIM SÓ QUE '''SERÁ UM OBJECT COM ALGUMAS COISAS NO SEU INTERIOR''' ( e não '''UM OBJECT VAGO''') 







//// E ESCREVEMOS 'T' E 'U' JUSTAMENTE PARA __ DIFERENCIAR OS PARAMETERS, serão 2 diferentes objects como parameters..










----------------------------------------------------
































OS CONSTRAINTS PODEM SER DIFÍCIEIS DE SEREM USADOS NO INÍCIO, MAS VOCê SE ACOSTUMA....























------> A FUNÇÃO QUE O PROFESSOR CRIA É A 


DE 

'countAndPrint()'....











--> PROFESSOR EXPLICA UQE ISSO VAI OBTER ALGUNS ARGUMENTOS,





argumentos que serão 'GENERIC TYpe '------->PQ O PROFESSOR 


NÃO SE IMPORTA COM AQUILO que está dentro de cada object...  












--> RPOFESSOR EXPLICA QUE FAREMOS UMA GAMBIARRA,











E UQE VMAOS COLOCAR os parâmetros COMO SENDO DE 'type' T....














EX:








function countAndPrint<T>(objA: T, objB: number);{



}















-----> OK.. ISSO SIGNIFICA QUE TEREMOS UM 'GENERIC TYPE' 



,





que já vai ser usado por aquele parâmetro 1...











--> MAS A COISA QUE O PROFESSOR VAI QUERER RETORNAR, AQUI,



SERÁ UMA TUPLE (2 elementos separados, mas juntos em 1 array)...














com 

'[element,  ]' 







--> SEGUNDO ARGUMENTO DEVERÁ SER UMA 'DESCRIPTION STRING'...














--> VAMOS CRIAR UMA NOVA VARIÁVEL, em que dizemos 'Got no value'...










tipo assim:







function countAndPrint<T>(objA: T, objB: number);{


    let descriptionText = 'Got no value';




    return []

}















---> mas a ideia É MOSTRAR_ _ ESSE MESSAGE DE 'got no value' QUANDO 

NÓS ,NO  CÓDIGO, NÃO RECEBERMOS __



__ UM REQUEST com um 'ARRAY VÁLIDO' (cuja length naõ seja 0... ) 













--> OU SEJA, SE TIVERMOS UMA EMTPY STRING/ EMPTY VALOR, VOU QUERER 




RODADR essa imagem de 


'Got no value'...











-> JÁ SE QCONSEGUIRMOS 

UMA STRING VÁLIDA CONTENDO 'descipiton text,









,





ESCREVEMOS ASSIm:








function countAndPrint<T>(objA: T, objB: number);{


    let descriptionText = 'Got no value';
    if (element.value > 0) {

        descriptionText = 'Got ' + element.length + ' elements.';
    }



    return [element, ];

}














----------------------------------










eu escrevi ALGO TIPO ISTO:
















function countAndPrint<T extends Array<string>>(element: T){


    let descriptionText = 'Got no value';
    if (element.length === 1) {
        descriptionText = 'Got 1 element';
    } else if (element.length > 1) {
        descriptionText = 'Got ' + element.length + ' elements';
    }

    return [element, descriptionText];

}









-----------------------------------------------------















 O QUE INTERESSA É ISTO AQUI:





 
function countAndPrint<T extends Array<string>>(element: T){










    --> ou seja, aqui TEREMOS SÓ 1 ARGUMENT,

    'T',

    que será um __ ARRAY__ (extends Array),



    ARRAY EM QUE EXISTIRÃO OBRIGATORIAMENTE 'strings'... (<string>)










    <T extends Array<string>>










-------------------------------













OK... MAS O PROFESSOR ESCOLHE OUTRO APPROACH..








--> ELE DECIDE CRIAR UMA 




INTERFACE,



de nome 

'Lenghty',







__ QUE __ NO FINAL_ _ SÓ VAI GARANTIR QUE TEREMOS UM OBJECT COM UMA PROPRIEDADE 




de 'length',

que será um NUMBER....




(

    ou seja,

    PROFESSOR VAI LOQUEAR... ->em vez de 


    definir o type desse argumento 'T' como um ARRAY DE STRINGS,

    ele 



    VAI __ CRIAr__ 1 OBJECT__ 



    paramter 



    que 

    VAI TER UMA PROPRIEDADE 

    de 

    'length' 

    no interior....
)







EX:







interface Lengthy {

    length: number; //apenas 1 propriedade, que é 'length', de type NUMBER...
}



function countAndPrint<T extends Lengthy>(element: T){


    let descriptionText = 'Got no value';
    if (element.length === 1) {
        descriptionText = 'Got 1 element';
    } else if (element.length > 1) {
        descriptionText = 'Got ' + element.length + ' elements';
    }

    return [element, descriptionText];

}




------------------------------







OK... E ESCREVEMOS 



'''

function countAndPrint<T extends Lengthy>(element: T){




    ''





    COMO FIZEMOS O EXTEND DESSA INTERFACE DE 'lengthy',



    SABEMOS QUE 

    A COISA QUE VAMOS CONSEGUIR, O OBJECT,


    OBRIGATORIAMETNE DEVERÁ TER ESSA PROPRIEDADE DE 'length'..









    -----> OK..... ----> MAS AÍ SURGE UMA COISA INTERESSANTE:








1) PODEMOS CRIAR UM OBJECT COM ESSA PROPRIEDADE de 'length'....







2) PODEMOS  _ PASSAR UMA STRING (pq uma string sempre tem a propriedade de '.length')..
.








3) PODEMOS __ PASSAR UM ARRAY___ (pq arrays também possuem essa propriedade)...











--> É POR ISSO QUE AGORA SEREMOS CAPAZES __ DE ESCREVER VÁRIOS CALLS __ DIFERENTES__ DE 'countAndDescribe',



COM DIFERENTES 
PARÃMETROS....






---------------------------------------------------




















EX:


















interface Lengthy { ///o object/string/class/array que TIVER ESSA INTERFACE__ DEVERÁ OBRIGATORIAMENTE TER A PROPRIEDADE DE 'length'....


    length: number;
}






// function countAndDescribe<T extends Array<string>>(element: T){ //////versão alternativa, mais restritiva (aceita só ARRAYS DE STRINGS como parâmetro)...


//     let descriptionText = 'Got no value';
//     if (element.length === 1) {
//         descriptionText = 'Got 1 element';
//     } else if (element.length > 1) {
//         descriptionText = 'Got ' + element.length + ' elements';
//     }

//     return [element, descriptionText];

// }





function countAndDescribe<T extends Lengthy>(element: T){


    let descriptionText = 'Got no value';
    if (element.length === 1) {
        descriptionText = 'Got 1 element';
    } else if (element.length > 1) {
        descriptionText = 'Got ' + element.length + ' elements';
    }

    return [element, descriptionText];

}










console.log(countAndDescribe('Hi there!')); ///strings possuem essa propriedade de 'length', por isso não receberemos um error...



console.log(countAndDescribe(['a', 'b', 'c'])); ///arrays também possuem LENGTH...




console.log(countAndDescribe({length: 15})); ////aqui críamos um OBJECT com uma propriedade de length, então satisfeita aquela condição...




console.log(countAndDescribe({propriedade: 15})); /////insatisfeita a condição da 'interface'...

























---------------------------------------------------------










--> QUANDO O PROFESSOR PASSA O MOUSE EM CIMA DA FUNÇÃO 'countAndDescribe',



ELE VÊ ISTO:






function countAndDescribe<T extends Lengthy>(element: T): (string | T)[]














'''''(string | T)[]'''''' --------> OU SEJA,


ELE ESTÁ NOS DIZENDO QUE __ VAI __RETORNAR SEMPRE UM ARRAY 









COM OS TYPES OU de 

'string' ou  de 'T'





(pq 'T' pode ser ou uma string, ou um array, ou um object, etc etc)...






------------------------------------







OK...  ---->  MAS O PROFESSOR EXPLICA QUE ELE QUER SER MAIS ESPECÍFICO QUANTO AO RETURN TYPE DESSE NEGÓCIO,




por isso 




ELE DEFINE que 









O RETURN TYPE DESSE NEGÓCIO DEVERÁ SER 'UMA TUPLE' ---> (ou seja '[xx, yy]' )













--> NO CASO, O RETURN TYPE VAI SER DE 



'[T, string]' ----------> OU SEJA,









SEMPRE VAMOS RETORNAR 'T' e 'string',




EM UMA TUPLE,

tipo assim:






[T, string]      (ou seja, NÃO É UM UNION/MIXED TYPE, E SIM UMA TUPLE, QUE É RETORNADA AQUI)....














É POR ISSO QUE ELE ESCREVE ASSim:








function countAndDescribe<T extends Lengthy>(element: T): [T, string] {


    let descriptionText = 'Got no value';
    if (element.length === 1) {
        descriptionText = 'Got 1 element';
    } else if (element.length > 1) {
        descriptionText = 'Got ' + element.length + ' elements';
    }

    return [element, descriptionText];

}








---------------------------------









MAIS PROPRIAMENTE, ESTA LINHA:







function countAndDescribe<T extends Lengthy>(element: T): [T, string] {













    ':[T, string]' {}















--> OK... COMO RESULTADO DISSO, NOSSO TYPE NO TYPESCRIPT FICA ASSIM:









function countAndDescribe<T extends Lengthy>(element: T): [T, string]














---------------------












OBS:: A LENGTH EM STRINGS É A QUANTIDADE DE LETRAS NA STRING....














--> MAS É CLARO QUE NÃO PODEREMOS CHAMAR 


'countAndDescribe'


com um NUMBER, PQ 
NUMBERS NÃO POSSUEM 

ESSA PROPRIEDADE 

DE 

'length'....













-------------------------




AQUI, PORTANTO, TEMOS NOVAMENTE NOSSA/UMA 'GENERIC FUNCTION':







QUEREMOS SER UM POUCO NÃO ESPECÍFICOS SOBRE 

A DATA QUE 

VAMOS RECEBER AQUI,








__ PQ __ A ÚNICA COISA QUE VAMOS QUERER É QUE ESSE NEGÓCIO __TENHA__ UMA PROPRIEDADE DE 'length'

no seu interior.... 

(

    pq fora isso, não temos interesse algum no tipo de data que vamos querer receber 
)













--> E O PROFESSOR NÃO VAI QUERER RESTRINGIR O CALL DA FUNCTION A APENAS UMA STRING/ARRAY;


------> E O PROFESSOR NÃO VAI QUERER TER QUE CRIAR UM MONTE DE OVERLOADS PARA 

HANDLAR TODOS OS CASES,





__ OU TVZ CRIAR UM UNION TYPE GIGANTE (pq eu posso até esquecer alguns types que tem essa property)....


















------------> ok, SE QUEREMOS SER MAIS FLEXÍVEIS, USAMOS OS GENERIC TYPES,


que só se importam com coisas específicas (como a presença de uma propriedade no interior de algum TIPO DE DATA)...