(()=>{"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e,this.element)}}function t(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}function n(e){let t=!0;return e.required&&(t=t&&""!==e.value.toString().trim()),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.toString().length>e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.toString().length<e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<e.max),t}var r;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(r||(r={}));class s{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.projectStatus=s}}class i extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}addProject(e,t,n){const i=new s(Math.random().toString(),e,t,n,r.Active);this.projects.push(i),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.projectStatus&&(n.projectStatus=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}static getInstance(){return this.instance||(this.instance=new i),this.instance}}const l=i.getInstance();class o extends e{constructor(){super("project-input","app","afterbegin","user-input"),this.titleInputElement=this.element.querySelector("#title"),console.log(this.titleInputElement.value),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}renderContent(){}configure(){this.element.addEventListener("submit",this.submitHandler)}submitHandler(e){e.preventDefault(),console.log(this.titleInputElement),console.log(this.titleInputElement.value);const t=this.gatherUserInputs();if(Array.isArray(t)){const[e,n,r]=t;console.log(e,n,r,"LINE"),l.addProject(e,n,r),this.clearInputs()}this.clearInputs()}gatherUserInputs(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,r=+this.peopleInputElement.value,s={value:t,required:!0,minLength:5},i={value:r,required:!0,min:1,max:10};return n({value:e,required:!0,minLength:5})&&n(s)&&n(i)?[e,t,+r]:(alert("Invalid input, please try again."),void console.log("TEST"))}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([t],o.prototype,"submitHandler",null);var a=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class c extends e{constructor(e,t){super("single-project",e,"beforeend",t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"One Person Assigned":`${this.project.people} Persons Assigned`}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){const{title:e,description:t,people:n}=this.project,r=this.element.querySelector("#title"),s=this.element.querySelector("#people"),i=this.element.querySelector("#description");r.textContent=e,s.textContent=this.persons,console.log(s.textContent),i.textContent=t}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}}a([t],c.prototype,"dragStartHandler",null),a([t],c.prototype,"dragEndHandler",null);var d=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class p extends e{constructor(e){super("project-list","app","beforeend",`${e}-projects`),this.listType=e,this.assignedProjects=[],this.assignedProjects=[],this.configure(),this.renderContent()}renderProjects(){document.getElementById(`${this.listType}-projects-list`).innerHTML="";for(const e of this.assignedProjects)console.log(e),console.log(this.assignedProjects),new c(`${this.listType}-projects-list`,e)}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),l.addListener((e=>{const t=e.filter((e=>"finished"===this.listType?e.projectStatus===r.Finished:e.projectStatus===r.Active));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.listType}-projects-list`;console.log(e),this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=`${this.listType.toUpperCase()} PROJECTS`}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");console.log(e.dataTransfer.getData("text/plain")),l.moveProject(t,"active"===this.listType?r.Active:r.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}}d([t],p.prototype,"dragOverHandler",null),d([t],p.prototype,"dropHandler",null),d([t],p.prototype,"dragLeaveHandler",null),new o,new p("active"),new p("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,