














----------> AGORA VAMOS SAIR UM POUCO DE FUNCTION OVERLOADS,


QUE ERA ESTE TÓPICO AQUI:









type Combinable2 = string | number; 





function add2(a: Combinable2, b: Combinable2) {

    if (typeof a === 'string' || typeof b === 'string') {

        return a.toString() + b.toString();
    }



    return a + b; 
}









//// se passarmos o mouse em cima de 'add', typescript vai dizer isto: 



///function add2(a: Combinable2, b: Combinable2): string | number  -----------> OU SEJA, VAI DIZER 'ESSE NEGÓCIO VAI RETORNAR OU UMA STRING, OU UM NUMBER'...


 



add2(1, 5); /// ele diz que o VALOR RETORNADO SERÁ DE 'number' ou de 'string',  o que É INCORRETO, PQ O VALOR __ RETORNADO, NESSE CASO, VAI SER 100% UM NUMBER...



const result2 = add2('Max', 'Schwarz'); ///ainda vamos ganhar 'combinable' como return type, o que é MEIO (completamente) ERRADO...




// const result2 = add2('Max', 'Schwarz') as string; ///POSSÍVEL FIX, mas não é ÓPTIMO PQ TEMOS QUE ESCREVER CÓDIGO ADICIONAL...


// result2.split(); /////////COMO ___ CONSEQUÊNCIA DISSO, DO 'type' desse 'result2' SER (string | number), __ NÃO PODEMOS/PODEREMOS __ CHAMAR FUNÇÕES DE STRING NELE, PQ ISSO NOS DARÁ ERRORS....






result2.split('a', ); //////// SE USAMOS 'as string', __ ISSO FUNCIONARÁ.... (é um possível FIX).... --> esse é o fix approach que usa 'TYPE CASTING'...









/////////////////////////
///////////////////////////////














/////////////////////////AGORA O APPROACH DOS FUNCTION OVERLOADS:



///(sim, vocÊ precisa DUPLICAR o 'function add2')...., e também os PARÂMETROS...


////aí você vai colocar o RETURN TYPE PARA CADA 'case' dos parâmetros que você receber, nessa sua função... (ex: '2 parametros com type de number, vou querer retornar 'number'  também''')....







// function add3(a: number): number; //outros exemplos de overloads... (se deixarmos nosso 2o parametro como 'optional'...)

function add3(a: number, b: number): number; /// EXEMPLO DE FUNCTION OVERLOADS....
function add3(a: string, b: string): string;
function add3(a: number, b: string): string;
function add3(a: string, b: number): string;
function add3(a: Combinable2, b: Combinable2) {

    if (typeof a === 'string' || typeof b === 'string') {

        return a.toString() + b.toString();
    }



    return a + b; 
}






const result4 = add3(21, 12); 








result4.toFixed(); //benefício de usar FUNCTION OVERLOADS...




const result5 = add3('21', '12'); /// ''' function add(a: string, b: string): string (+3 overload)''' --> '+3 overload' --> 3 OUTRAS MANEIRAS DE CHAMAR ESSA FUNÇÃO (com diferentes TYPES DE PARAMETERS, em outras palavras)...




result5.split('sss'); ///benefício de usar FUNCTION OVERLOADS ( o type estará definido como 'string', pq é isso que definimos no return type em '' function add3(a: string, b: string): string; '')































--------> EM VEZ DISSO,



AGORA VEREMOS OUTRA FEATURE BEM LEGAL.... 















----> é a feature do 'OPTIONAL CHAINING'....












--> DIGAMOS QUE TEMOS UM APP EM QUE __ 



ESTAMOS RECEBENDO DATA LÁ DE UM BACKEND...,





DE UMA DATABASE.. (ou de qualquer fonte),




QUALQUER FONTE 




EM QUE __ VOCÊ__ NÃO 


TEM CERTEZA__ _QUE__, EM 1 DETERMINADO OBJECT,




1 CERTA PROPRIEDADE ESTÁ DEFINIDA...









(


    ex:


    propriedade 'id' 



    em 

    'Product'.. 
)












--------> O PROFESSOR FABRICA UM EXEMPLO DE 





'fetchedUserData',

uma const....









ex:











const fetchedUserData = ....














--> ESSA CONST CONTERÁ 


____UM OBJETO,



OBJETO  SOBRE __ O __ USER__ QUE FETCHEAMOS...












-_> ESSE NEGÓCIO VAI TER 1 ID,

de 

'u1',




E UM NAME DE 

'max'...











--> teremos uma propriedade de 'job', com propriedades 'title' e 'description'...













ex:

 









 const fetchedUserData = {

     id: 'u1',
    name: 'Max',
    job: {title: 'CEO', description: 'My own company'}
 }











 ---------------------------------------














 CERTO.... QUANDO OBTEMOS DATA COMO ESSA, PODEMOS TRABALHAR COM SUAS PROPRIEDADES...









 -----> É CLARO QUE FAREMOS COISAS COMPLEXAS COM ESSA DATA,



 MAS PARA COMEÇAR,


 escrevemos um console.log 






 DO TITLE em 'job'..








 ex:






const fetchedUserData = {
  id: 'u1',
  name: 'Max',
  job: { title: 'CEO', description: 'My own company' },
};


console.log(fetchedUserData.job.title);





















--------> VAMOS OBTER UM PRINT DE 'CEO'...














--> OK.... ATÉ AGORA, ISSO NÃO É TÃO FANCY...












--> MAS SE ESTAMOS FETCHEANDO ISSO DE UM BACKEND,







___TALVEZ__, POR QUALQUER RAZÃO,




NÓS ___ NÃO FETCHEAMOS TODA A DATA DE QUE PRECISAMOS... (



    ou seja, uma parte da data 


    PODE AINDA NÃO TER SIDO SETTADA, A ESTE PONTO...
) 








-----------> EM APLICATIVOS MAIS COMPLEXOS,

MAIORES,




VOCÊ CERTAMENTE TRABALHA COM 



'NESTED DATA',






DATA EM QUE __ NÃO SABEMOS/SABEREMOS __ 

SE UMA 


PROPRIEDADE 




EM 1 OBJECT 

JÁ FOI SETTADA,




OU SE AINDA ESTÁ 'UNDEFINED'... ---------> É POR ISSO QUE 





AQUI VAMOS COMENTAR 'job'

PARA FORA,






para que 



ELE NÃO EXISTA... (failed to fetch)...















ex:












const fetchedUserData = {
  id: 'u1',
  name: 'Max',
  ////job: { title: 'CEO', description: 'My own company' },
};


console.log(fetchedUserData.job.title);















EX:

















const fetchedUserData = {
  id: 'u1',
  name: 'Max',
 /// job: { title: 'CEO', description: 'My own company' }, ////caso hipotético: FALHAMOS NO 'GET' dessa propriedade, LÁ NO OBJETO recebido pelo server/backend/database...
};


console.log(fetchedUserData.job.title);















--------------------------------------------------
















OK... AÍ VAMOS IMEDIATAMENTE RECEBER UM ERRO... --> o typescript vai reclamar 


DISSO,

PQ 


__ELE __ SABE_ QUE 

NÃO 



HÁ UMA PROPRIEDADE 


de 



'job'



nesse objeto, no momento...








-----> OK... --> MAS O PROBLEMA, NO CASO, É QUE:










const fetchedUserData = {
  id: 'u1',
  name: 'Max',
 /// job: { title: 'CEO', description: 'My own company' }, ////caso hipotético: FALHAMOS NO 'GET' dessa propriedade, LÁ NO OBJETO recebido pelo server/backend/database...
};


console.log(fetchedUserData.job.title);















--------> ___ ELE__ sABE___ QUE __ eSSA PROPRIEDADE DE 'job'





NÃO __ EXISTE__ NESSE 




OBJECT ESPECÍFICO..








-----> O PROBLEMA É JUSTAMENTE QUE O TYPESCRIPT __ NÃO VAI TER COMO SABER 





SE ESSA PROPRIEDADE/DATA 



É 





UMA __ PROPRIEDADE QUE É FETCHEADA DE ALGUM LOCAL ___ 









'QUE NÃO É CONTROLADO PELO TYPESCRIPT' (ou seja, o TS _ Apenas sabe que essa propriedade NÃO EXISTE 

NESSE OBJECT ESPECÍFICO, MAS __ ELE _ NÃO TEM COMO SABER SE ESSA 



PROPRIEDADE 

NÃO ESTÁ VINDO DE ALGUMA OUTRA FONTE)...



















--> PODEMOS ESTAR FETCHEANDO ESSE 'OBJECT' lá do backend,






___ FATO __ QUE PODERÁ FAZER COM QUE 



'WE DONT KNOW WITH CERTAINTY WHAT DATA WILL BE RETURNED'... ---------> 


























NO CASO DO JAVASCRIPT COMUM, QUANDO VOCÊ __ NÃO TEM CERTEZA__ SE ALGO (como uma propriedade)



SERÁ RETRIEVADA DO BACKEND OU NÃO,


O QUE 

VOCÊ 



PODE FAZER/PODEMOS FAZER 






é 







1) TENTAR ACESSAR 'job' nessa propriedade...









2) e se CONSEGUIMOS ACESSAR O 'job',


V
AMOS EM FRENTE E TENTAMOS 


ACESSAR O 'title', nessa propriedade de job:










REPRESENTAÇÃO:






const fetchedUserData = {

    id: 'u1',
    name: 'Max',
////job: {title: 'CEO', description: 'My own company'}
}






console.log(fetchedUserData.job && fetchedUserData.job.title);












console.log(fetchedUserData.job && fetchedUserData.job.title);





^^^^^^ ESSA É A MANEIRA JAVASCRIPT DE 



''''CHECAR SE ALGO EXISTE ANTES 


DE ENTÃO __ 'DIVE DEEPER' nesse OBJECT POTENCIAL'''.... --------------->



















VAMOS ANALISAR ESSE CONSOLE.LOG:




console.log(fetchedUserData.job && fetchedUserData.job.title);














--> se 'job' aí estiver como 'undefined',



AQUELE CÓDIGO DE 'fetchedUserData.job.title' __ NUNCA SERÁ EXECUTADO,


o que nos salvará do erro...

(

    'WE AVOID A RUNTIME ERROR'...
)










---------> claro que, no nosso exemplo typescript,


o 


TS 

sabe que 

'job'

NÃO EXISTE, antecipadamente....












--------> __ ENTRETANTO__, 


SE ESSA PROPRIEDADE FOSSE ADVINDA DE ALGUM 'SOURCE'

QUE 


o 
TYPESCRIPT 
NÃO CONSEGUE 'INVESTIGAR',



como por exemplo o RESULTADO DE UM HTTP REQUEST,





__ AÍ__ 

A MANEIRA SEGURA 




DE EVITAR RUNTIME ERRORS É JUSTAMENTE ESCREVER ALGO ASSIM:


''''''                                                      ''''''
console.log(fetchedUserData.job && fetchedUserData.job.title);






















--------> OK..... --------> E SE ESSA PROPRIEDADE REALMENTE EXISTE,


vamos ganhar 


o mesmo output de 

antes 


('CEO'), 











MAS _ SE ELE NÃO EXISTE,

NÕA GANHAMOS UM 



RUNTIME ERROR....










-------------------------







MAS COM O TYPESCRIPT, TEMOS UMA MANEIRA MAIS ELEGANTE DE FAZER ISSO,

POR MEIO DO 

'OPTIONAL CHAINING':











const fetchedUserData = {
  id: 'u1',
  name: 'Max',
 /// job: { title: 'CEO', description: 'My own company' }, ////caso hipotético: FALHAMOS NO 'GET' dessa propriedade, LÁ NO OBJETO recebido pelo server/backend/database...
};


// console.log(fetchedUserData.job.title); 








///como evitar RUNTIME __ ERRORS__ NO JAVASCRIPT EM SI...
console.log(fetchedUserData.job && fetchedUserData.job.title); ///esse é a maneira de 'EVITAR RUNTIME ERRORS' no javascript... (E não no typescript) ---> pq se aquela propriedade inicial de 'job' NÃO EXISTIR/NÃO FOR RECEBIDA/ESTIVER COMO UNDEFINED, o código de '.job.title' TAMBÉM NÃO SERÁ EXECUTADO....












///COMO EVITAR RUNTIME ERRORS __ NO TYPESCRIPT___ ---> usando 'optionalChaining'...

















----------------------------------






















-------> A COISA EM QUESTÃO É O OPERADOR DE 'OPTIONAL CHAINING'....














--> PARA USAR ESSE OPERADOR,

você deve escrever '?" 


AO LADO 

 


 DA COISA/VARIÁVEL 



 __ que __ VOCÊ __ NÃO TEM CERTEZA QUE 

 ESTARÁ 
 COMO 'defined'...















 --> NO CASO, ESCREVEREMOS EM 'fetchedUserData'...










 ex:










 
const fetchedUserData = {
  id: 'u1',
  name: 'Max',
 /// job: { title: 'CEO', description: 'My own company' }, ////caso hipotético: FALHAMOS NO 'GET' dessa propriedade, LÁ NO OBJETO recebido pelo server/backend/database...
};


// console.log(fetchedUserData.job.title); 








///como evitar RUNTIME __ ERRORS__ NO JAVASCRIPT EM SI...
console.log(fetchedUserData.job && fetchedUserData.job.title); ///esse é a maneira de 'EVITAR RUNTIME ERRORS' no javascript... (E não no typescript) ---> pq se aquela propriedade inicial de 'job' NÃO EXISTIR/NÃO FOR RECEBIDA/ESTIVER COMO UNDEFINED, o código de '.job.title' TAMBÉM NÃO SERÁ EXECUTADO....












///COMO EVITAR RUNTIME ERRORS __ NO TYPESCRIPT___ ---> usando 'optionalChaining': 






console.log(fetchedUserData?.job?.title);

















EX:













console.log(fetchedUserData?.job?.title);



















A PERGUNTA É ESTA:




'''POR ACASO FETCHEDUSERDATA EXISTE?


ENTÃO ACESSE JOB.... --> POR ACASO JOB EXISTE?  --> ENTÃO ACESSE 

'title'''













-----> OK... MAS ESSA ESCRITA AÍ INVOCA UM ERRO DE TYPESCRIPT, ELE APITA....









-----> ISSO ACONTECE PQ __ o TYPESCRIPT __ AINDA SABE, COM 100% DE CERTEZA,

QUE 



'job'

NÃO EXISTE DENTRO DE 'fetchedUserData'....














----------> MAS SE __COMENTARMOS 'job' para dentro do código,


o 


typescript vai compilar 'just fine' (mas aí perdemos a razão de ser dessa escrita)...













--> ACHO QUE SE QUEREMOS USAR ESSA SINTAXE, DEVEMOS DESLIGAR AQUELA OPTION, no 'tsconfig.json',



de 


''
    "noEmitOnError": true,   

    '''








------------------

















--> OK... ESSE OPTIONAL CHAINING OPERATOR 

NOS DEIXA 'SAFELY ACCESS NESTED PROPERTIES AND NESTED OBJECTS IN OUR OBJECT DATA''' -->  E 




SE __ A COISA NA FRENTE DO '?" estiver como UNDEFIND,




ELE VAI AUTOMATICAMENTE __ NÃO ___ RODAR/LER A COISA QUE VEM NA DIREITA (o que vai evitar um RUNTIME ERROR no nosso projeto, pq não acessaremos um 'job'/title que não existe/está como undefined)...















------> OK... POR TRÁS DAS CENAS,



ISSO É 



BASICAMENTE TRADUZIDO PARA UM IF CHECK CHECNADO SE 



'fetchedUserData'

existe,

ANTES DE 

ENTÃO CHECAR SE 'job' 

existe nesse objeto...