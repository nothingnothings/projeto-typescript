














----> AGORA DEVEMOS CONTINUAR....












-> VIMOS A FEATURE DOS SOURCE MAPS,

QUE 

NOS AJUDA MT COM O DEBUGGING EM PROJETOS QUE USAM O TYPESCRIPT...















----> AGORA TEMOS A OPÇÃO 



'outFile':



  // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */














O PROFESSOR EXPLICA QUE ESSA OPÇÃO N FUNCIONA PARA NÓS AGORA,


QUE NÃO IMPORTA MT AGORA....
















--> POR OUTRO LADO, TEMOS 


AS OPTIONS DE 'OUTDIR' 

E 

'ROOTDIR' 






--> ESSAS SÃO IMPORTANTES...









--> QUANTO MAIOR SEU PROJETO,


___ MAIOR SERÁ SUA NECESSIDADE DE ORGANIZAR SUAS FILES...













--> TIPICAMENTE VOC~e NÃO VAI QUERER ORGANIZAR SUAS FILES 



'''SOLTAS''' 


no meio 


do 


ROOT FOLDER do seu projeto....









--> em vez disso,


O QUE VOCÊ FREQUENTEMENTE VERÁ EM PROJETOS 


será 

a criação 

de 


1 

folder 
chamado de 


'src',






em que TEREMOS TODO NOSSO 'ARQUIVO FONTE' (com os ARQUIVOS TYPESCRIPT) 



E 


AÍ __ 



UM FOLDER DE 'dist' (em que teremos todo NOSSO CÓDIGO JS, FORMATADO A PARTIR 
DO 

CÓDIGO TYPESCRIPT EM 

'src')











--> sim, isso é realmente muito útil; eu já havia visto como era isso antes....











EX:




{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment.  -> OU SEJA, DESCREVE AS FEATURES QUE SERÃO SUPORTADAS PELO SEU TYPESCRIPT..*/
       // "lib": [    "dom",
    // "es6",
    // "dom.iterable",
    // "scripthost"],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment.  -> OU SEJA, DESCREVE AS FEATURES QUE SERÃO SUPORTADAS PELO SEU TYPESCRIPT..*/
   
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. MUITO IMPORTANTE*/
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true,                                /* Create source map files for emitted JavaScript files.  ------> IMPORTANTE PARA O DEBUGGING DE SEUS ARQUIVOS TYPESCRIPT ( no lugar dos JAVASCRIPT). ..  --> MT BOM PARA DEBUGGING... para usar a aba 'sources' NO CHROME.. */
   
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. OPCOES MUITO IMPOR */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. MUITO IMPORTANTE*/
    
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "exclude": [
"analytics.js",
"*.dev.ts", /* exemplo de WILD CARD -- excluíremos da compilation TODOS OS ARQUIVOS NO ROOT DE SEU PROJETO COM EXTENSÃO '.dev.ts'... */
"**/*.dev.ts",  /*isto vai excluir TODOS OS ARQUIVOS DE SEU PROJETO com final '.dev.ts' */
"node_modules" /* POR DEFAULT, O NODE_MODULES SEMPRE SERÁ  EXCLUDED.... ENTRETANTO, SE VOCê ESCREVER ESSA OPTION/ENTRY DE 'exclude', VOCê É OBRIGADO A ESPECIFICAR, AQUI, QUE VOCê QUER EXCLUIR O 'node_modules', SENÃO ELE SERÁ __ INCLUÍDO, por alguma razão, NO COMPILE DE SEU CÓDIGO TYPESCRIPT...*/

],

/* "include": []  É O CONTRÁRIO DE EXCLUDE.... --> CUIDADO, QUANDO VOCÊ DEFINE 'include', SÓ OS ARQUIVOS QUE VOCE ELENCAR NO ARRAY SERÃO ACTUALLY COMPILADOS; todos os arquivos que vocÊ não mencionar SERÃO __ IGNORADOS__....  */  

/* "files": [ "app.ts" ]    --> MESMA COISA QUE O 'include', MAS COM A DIFERENÇA DE QUE AQUI VOCê SÓ PODE APONTAR FILES ESPECÍFICAS, SEM PODER ESPECÍFICAR FOLDERS INTEIROS, como no 'include'... */




}







































----------------



FICOU ASSIm:








 /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. MUITO IMPORTANTE*/
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true,                                /* Create source map files for emitted JavaScript files.  ------> IMPORTANTE PARA O DEBUGGING DE SEUS ARQUIVOS TYPESCRIPT ( no lugar dos JAVASCRIPT). ..  --> MT BOM PARA DEBUGGING... para usar a aba 'sources' NO CHROME.. */
   
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. OPCOES MUITO IMPOR */
    "outDir": "./dist",    















    ----------------------------------















    OK, AGORA TEMOS:



    1) FOLDER de 'src', com nossos ARQUIVOS '.ts', que 


    serão usados para as COMPILAÇÕES....








    2) folder 'dist',

    em que 

    são dumpados nossos arquivos javascript prontos, compilados....




    (nossos sourcemaps também ficam aqui....os arquivos '.js.map'...)













ESSA É A UTILIDADE DE 'rootDir'


E 



'outDir'...








--> OK... O ÚNICO AJUSTE QUE TEREMOS DE FAZER, NO CASO, É EM 'app.js',


em que teremos de trocar nosso script de 


'src=app.js'

para 


'src=dist/app.js'
















OK........
 








COM ISSO, FICAMOS COM UMA WORKING APPLICATION, MAS COM UMA CLEANER PROJECT STRUCTURE...
















----> ok.... NOSSO WATCH MODE AINDA 


VAI FUNCIONAR,

E A ESTRUTURA DE 


FOLDERS DE 'src'




VAI SER REPLICADA COM EXATIDÃO em 'dist',


no output...











o 'rootDir'


serve 

função similar a de 'include',


PQ 


ELE 

VAI 
OLHAR 

PARA 


ESSE 



FOLDER AÍ,apenas...












----> ele vai DELIMITAR PARA APENAS ESSE FOLDER AÍ os arquivos '.ts'



que deverão ser compilados...
















--> OUTROS FOLDERS QUE FICAREM NO ROOT LEVEL, como 


'node_modules',


NÃO SERÃO TRANSPILADOS EM 'dist',


pq 


DEFINIMOS BEM CLARAMENTE QUE O ÚNICO FOLDER A SER EXAMINADO É 


'src'...












ok..... ----> SE CONTINUARMOS,






vemos a option de 'composite', que deve ser IGNORADA....













--> TEMOS 'removeComments '-->  ISSO É BEM CLARO:  SE VOCê DEIXAR ISSO ATIVADO,


QUAISQUER COMMENTS QUE 
VOCê 

TENHA FEITO NOS SEUS ARQUIVOS 

TYPESCRIPT __ VÃO SER AUTOMATICAMENTE REMOVIDOS DURANTE O COMPILE EM JAVASCIRPT...












--> ISSO É ÚTIL, DEIXA SEUS ARQUIVOS MAIS CURTOS...










-> ALÉM DISSO, TEMOS A OPTION DE 'noEmit',



QUE 

FAZ COM QUE _ARQUIVOS__ JAVASCRIPT __ DEIXEM DE SER EMITIDOS/CRIADOS A PARTIR 


DO SEU CÓDIGO TYPESCRIPT.... ---------> ISSO PODE PARECER 



__ESTRANHO__,

PQ 



TODA A IDEIA POR TRÁS DO TYPESCRIPT É JUSTAMENTE 

COMPILAR ESSE CÓDIGO EM JS....














----> MAS ESSA OPTION EXISTE APENAS __ PARA OS CASOS EM QUE 

VOCê QUER APENAS 'CHECK' SE SEUS ARQUIVOS ESTÃO 


CORRETOS,
SEM 


QUERER TRANSPILAR ESSE CÓDIGO.... (


  útil em projetos gigantes, em que 

  vocÊ quer rapidez acima de tudo, 


  em que você só vai querer double-check,

  reportar quaisquer errors, sem transpilar tudo dnv..
)












-----> certo.... -----> ALÉM DISSO,


TEMOS 

'importHelpers' --> NÃO USAREMOS ISSO AGORA, PODEMOS IGNORAR....















------> 'downlevelIteration' ------> É UMA OPTION INTERESSANTE, PORÉM AVANÇADA....












ex:



// "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
















--> é uma opção avançada, que 

é 

interessante nas hipóteses em qeUE 


VOCê 

COMPILA SEU CÓDIGO PARA VERSÕES MAIS VELHAS DO JAVASCRIPT ... --> 




NESSES CASOS,


SE VOCê TRABALHAR COM FOR LOOPS,

VOCê 
PODE
SE 

DEPARAR COM PROBLEMS EM QUE 




A COMPILATON NÃO SERÁ FEITA DIREITO.... -->  E ESSA OPÇÃO SERVE PARA __ CONSERTAR__ ESSES CASES...




















OK, então pq diabos não deixamos essa option sempre ligada (true) ---------> É PQ 





ESSA OPTION, deixada como true ,


   


   __ACABA DEIXANDO SEU CÓDIGO MAIS VERBOSO E LENTO...






   (é uma compilation mais exata, mas mais VERBOSA) -----> é por issoq ue 





   VOCê SÓ DEVE USAR ESSA OPTION SE VOCê TIVER __ LOOPS__ E SE 

 

 VER QUE 

 
   SEU
   'GENERATED CODE' 


   do nada passe a se comportar de forma diferente do esperado, com esses loops...