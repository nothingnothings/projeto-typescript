
















--> OK... ABAIXO DE 'target',

temos 'MODULE':



{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "exclude": [
"analytics.js",
"*.dev.ts", /* exemplo de WILD CARD -- excluíremos da compilation TODOS OS ARQUIVOS NO ROOT DE SEU PROJETO COM EXTENSÃO '.dev.ts'... */
"**/*.dev.ts",  /*isto vai excluir TODOS OS ARQUIVOS DE SEU PROJETO com final '.dev.ts' */
"node_modules" /* POR DEFAULT, O NODE_MODULES SEMPRE SERÁ  EXCLUDED.... ENTRETANTO, SE VOCê ESCREVER ESSA OPTION/ENTRY DE 'exclude', VOCê É OBRIGADO A ESPECIFICAR, AQUI, QUE VOCê QUER EXCLUIR O 'node_modules', SENÃO ELE SERÁ __ INCLUÍDO, por alguma razão, NO COMPILE DE SEU CÓDIGO TYPESCRIPT...*/

],

/* "include": []  É O CONTRÁRIO DE EXCLUDE.... --> CUIDADO, QUANDO VOCÊ DEFINE 'include', SÓ OS ARQUIVOS QUE VOCE ELENCAR NO ARRAY SERÃO ACTUALLY COMPILADOS; todos os arquivos que vocÊ não mencionar SERÃO __ IGNORADOS__....  */  

/* "files": [ "app.ts" ]    --> MESMA COISA QUE O 'include', MAS COM A DIFERENÇA DE QUE AQUI VOCê SÓ PODE APONTAR FILES ESPECÍFICAS, SEM PODER ESPECÍFICAR FOLDERS INTEIROS, como no 'include'... */




}



















--------> 'MODULE' É UMA OPÇÃO QUE O PROFESSOR __ PULARÁ


POR ENQUANTO,

PQ 

É 

UMA FEATURE/OPTION QUE SÓ SABEREMOS USAR QUANDO 


APRENDERMOS SOBRE MODULES EM TYPESCRIPT (E como podemos CONECTAR MÚLTIPLAS FILES)...













--> MAS 'lib' 
É 

UMA OPTION INTERESSANTE....











--> ELA TE DEIXA ESPECIFICAR 




__ QUAIS___ DEFAULT_ OBJECTS  __ E 'FEATURES'


O

typescript saberá....(


POR ISSO,

PROFESSOR QUER DIZER FEATURES COMO 

'WORKING WITH THE DOM'...


)











--> PARA EXEMPLIFICAR ISSO,



PROFESSOR VAI ATÉ O INDEX.HTML 


de 

nosso projeto,


ex:







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Understanding TypeScript</title>
    <script src="app.js"></script>
    <script src="analytics.js"></script>
</head>
<body>
    
</body>
</html>



















--> DIGAMOS QUE TEMOS UM BUTTON,

E NESSE BUTTON 



DIZEMOS ALGO COMO 'CLICK ME' 




---> QUANDO ESSE BUTTON FOR CLICADO,




VAMOS QUERER __ PRINTAR UMA MENSAGEM...












--> PARA ISSO,




VAMOS ATÉ O NOSSO 'app.ts',


E AÍ 



GANHAMOS ACESSO A ELE 

COM 


UM QUERYSELECTOR de button...











ex:




const button = document.querySelector('button');














-> AÍ ADIICONAMOS UM EVENT LISTENER A ESSE ELEMENTO 'BUTTON',

e até 

agora 


NÃO RECEBEMOS NENHUM ERRO TYPESCRIPT... 









ex:









const button = document.querySelector('button');




button.addEventListener();





---------------------------------





OK... MAS QUANDO ESCREVERMSO 'button.xxx',


colocarmos esse addEventListener,






O TYPESCRIPT VAI __ 
APITAR 

E VAI NOS DIZER 

'NÓS NÃO ENCONTRAMOS NENHUM BUTTON AÍ, PARA ANEXAR ESSE 

EVENTLISTENER'...



(

    claro, pq eu NÃO DECLAREI ESSa constante 'button' COMO SENDO UM 

    HTMLButtonElement...
)






---------------------------------------







por enquanto,

O PROFESSOR NÃO VAI ESCREVER UM 
'as HTMLButtonElement',




E SIM 


__ VAI SÓ ESCREVER UM '!' 


ao final 

desse 


element... 






ex:





const button = document.querySelector('button')!;









(

    ACHO QUE O "!' significava que esse elemento vai CERTAMENTE EXISTIR, OU ALGO ASSIM..
)











const button = document.querySelector('button')!;


button.addEventListener('button');





















------> UMA ALTERNATIVA 
A ESSE CÓDIGO, QUE FOI ESCRITA AUTOMATICAMENTE POR MEU TYPESCRIPT,

foi esta:

// const button = document.querySelector('button');
// button?.addEventListener();  //esse 'INTERROGAÇÃO' foi automaticamente adicionado pelo typescript...










(essa interrogação)...












--> OK... 


MAS AÍ O PROFESSOR ADICIONA UM CONSOLE.LOG DE 

'clicked',


etc etc....







EX:




const button = document.querySelector('button')!;


button.addEventListener('button', 


() => {
    console.log('exemplo');
}

);

















--> MAS ISSO AÍ NÃO É A PARTE INTERESSANTE... A PARTE INTERESSANTE É QUE 

SE 

O 

PROFESSOR 
RODAR 

'tsc',





__ ELE VERÁ 

QUE 
ISSO 

AÍ 




SERÁ 


'JUST COMPILED'...----------> PROFESSOR AFIRMA QUE __ ISSO É ESTRANHO....













--> O TYPESCRIPT, DIZ ELE, DEVERIA __ RECLAMAR QUE 'document' 




ESTÁ    'unknown' A ELE.... ---------> COMO DIABOS 




ELE 

SABE QUE 




TEMOS ESSA CONSTANTE/VARIABLE DE 'document'


DISPONÍVEL NESSE 


NOSSO 



ARQUIVO 'app.ts'...











--> E AINDA QUE ELE SOUBESSE QUE TEMOS ESSA VARIÁVEL DE 'document',


NÃO 

DEVERIA SER POSSÍVEL 

ELE 

SABER QUE 
TEMOS 

ESSE SELECTOR METHOD DE 'querySelector' .... --> 









ALÉM DISSO,

COMO DIABOS ELE SABERIA QUE 



'button',

essa constante aí,



__ POSSUI UM METHOD DE 'ADDEVENTLISTENER'... -------->











COMO DIABOS O TYPESCRIPT SABE DISSO TUDO... ---------> BEM ,







VOCÊ PODERIA DIZER ''AH, MAS NO VANILLA JAVASCRIPT ESSE CÓDIGO 




AÍ SERIA CÓDIGO VÁLIDO, É ÓBVIO QUE ELE RECONHECE COMO CÓDIGO VÁLIDO''...  ----> ENTRETANTO,

ESSA 

RESPOSTA É BURRA E SEM SENTIDO... --> ISSO PQ 

QUANDO 


VOCê 

ESCREVE SEU CÓDIGO TYPESCRIPT,

VOCê VAI 

ESCREVER COISAS QUE 

TALVEZ 

NEM 
SEJAM 

DESTINADAS 

AO 


RUN EM UM BROWSEr;


é possível que 

você esteja escrevendo código que RODARÁ NO SEU BACKEND,


ONDE O DOM __ NÃO EXISTE__...











---> É POR ISSO QUE É BIZARRO QUE 



ESSE CÓDIGO 'CRU' QUE ESCREVEMOS AQUI, SEM 


DECLARAR NADA,




__ É ___ RECONHECIDO PELO TYPESCRIPT COMO VÁLIDO...













--> A RAZÃO DE ELE SER RECONHECIDO COMO VÁLIDO É JUSTAMENTE 

AQUELA 

OPTION 

de 

'lib'



LÁ 

NO tsconfig.json:








-------------> '''''OK, MAS ESSA OPTION NEM MESMO ESTÁ SETTADA....'''' -------> simm,


ELA NÃO ESTÁ SETTADA,


MAS 

QUANDO NÃO É SETTADA, 

ALGUNS 

'VALORES DEFAULTS SÃO ASSUMED'... ----> SE NÃO ESTÁ SETTADA,





OS 


DEFAULTS __ DE SEU CÓDIGO/VARIÁVEIS DISPONÍVEIS 



VÃO __ DEPENDER___ DO 


SEU 

'COMPILER TARGET/javascript target',


AQUELA OPTION DE 






{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",      
















    --------> E COM 'es6' para cima (sendo o 2016 englobado por esse 'para cima'),





POR DEFAULT 



TODAS AS FEATURES 

QUE 

SÃO 

DISPONÍVEIS  

GLOBALMENTE NO 

ES6,

COMO O OBJETO 'map' (QUE É DISPONÍVEL NO es6),






__ SÃO TIDAS COMO VÁLIDAS .... -> ELE 


TAM´BEM 

ASSUME 
QUE 








TODOS OS 'DOM APIs'


SÃO/ESTÃO DISPONÍVEIS... 













--> CERTO... --> E VOC~e ENCONTRA AS DESCRIÇÕES DETALHADAS 

ACERCA DE CADA UMA DESSAS OPTIONS EM UM LINK ANEXADO A ESTA LIÇÃO....










OK.. ---> SE A OPÇÃO 'lib'

NÃO ESTÁ 
SETTADA,







___ ALGUNS DEFAULTS SÃO ASSUMED,

E ESSES DEFAULTS 

SÃO 

TIPICAMENTE 

OS DEFAULTS NECESSÁRIOS PARA SEU CÓDIGO TYPESCRIPT/COMPILADO 



____ RODAR__ NO BROWSEr (ou seja, com todas DOM APIs, etc etc)...















---------> ISSO SIGNIFICA QUE 
SE NÓS 

TIRARMOS O 'COMMENT OUT' 


desse 'lib',


VAMOS _ IMEDIATAMENTE 



RECEBER UM ERROR,

PQ 

FICAREMOS COM UM ARRAY __ VAZIO__ DE lib (que vai 'overwrite' OS VALORES DEFAULT/valor default dessa option, que é esse es6 fajuto)








EX:






"lib": [

]












----------> DENTRO DE 'lib'


DEVEMOS 


'MENTION SOME default

LIBRARIES/TYPE DEFINITIONS, THAT SHOULD BE USED 


on our project'...











--. E COMO NÃO PASSAMOS NADA,




ESTAMOS DIZENDO 

''HEY, SOBRE TODOS OS DEFAULTS 

QUE 
VOCê CONHECE, LEVE ISTO EM CONSIDERAÇÃO, ISTO SENDO PORRA NENHUMA''...















-------> ok.... DEVEMOS DEIXAR ISSO 'COMMENTED OUT' 


se não queremos especificar isso aí...












--> é por isso que se vocÊ deixar só 


'[
    
]',




VOCÊ 


ganhará ERROS 


SOBRE O 

'document',

sobre 

'console.log',



QUALQUER COISA...















----------> É POR ISSO QUE VAMOS QUERER SETTAR 

'lib',

o array segurado por essa option,




COMO 



SENDO 'SOME MORE REASONABLE VALUES'..












--> SE VOCê DIGITAr 'ctrl + space' nessa option, vocÊ ganha auto-complete,

e vÊ algumas 

OPTIONS COMO 


'dom',


'dom.iterable',



'es2015.core',


etc etc...














---> PODEMOS ADICIONAR 'DOM',


e esse É UM IDENTIFIER... --> HÁ VÁRIOS IDENTIFIERS



RECONHECIDOS PELO TYPESCRIPT..








--> O IDENTIFIER DE 'dom'

BASICAMENTE  DESBLOQUEIA 

'TODAS AS DOM APIs no typescript'... ------> O TYPESCRIPT VAI ENTENDER O QUE 


VOC~e VAI ESCREVER AGORA, 
PORTANTO... 

(

    vai reconhecer 'console',


    document, etc....

)










--> E COMO ESTAMOS TRABALHANDO 





COM 'NEXT-GEN JAVASCRIPT',



TAMBÉM

DEVEMOS 

COLOCAR O VALOR DE 
'es6',



PARA QUE 

O 

TYPESCRIPT TAMBÉM ENTENDA TODAS AS 'GLOBALLY AVAILABLE ES6 OPTIONS'....







TAMBÉM É BOM SETTAR 'dom.iterable' 


e 

'scripthost' -------> ESSES VALUES/IDENTIFIERS 

DESBLOQUEIAM TODAS AS OPTIONS JAVASCRIPT COM AS QUAIS VOCê GOSTARIA DE TRABALHAR...





fica tipo assim:





"lib": [
    "dom",
    "es6",
    "dom.iterable",
    "scripthost"
]










-------> OBS: ESSE É _ O EXATO SETUP QUE VOCê GANHA COMO 'default',

nessa opção,

quando voc~E setta 

O TARGET  DE SEU tsconfig.json


COMO 

SENDO 

o de 


'es6'...













---------> OK... ESSE É O DEFAULT, PORTANTO...














-------> MEIO REDUNDANTE SETTAR ISSO, MAS É BOM SABER O QUE FAZ...